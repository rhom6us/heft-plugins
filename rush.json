/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",

  /**
   * If you upgrade to a new major version of Rush, you should replace the "v5" path segment in the "$schema" field for all your Rush config files.  This will ensure correct error-underlining and tab-completion for editors such as VS Code.
   */
  "rushVersion": "5.138.0",
  "pnpmVersion": "9.12.3",
  "nodeSupportedVersionRange": ">=18.20.3 <19.0.0 || >=20.14.0 <21.0.0",
  "nodeSupportedVersionInstructions": "Run 'nvm use 20 (nvm use lts/*)' to switch to the expected node version.",
  "projectFolderMinDepth": 2,
  "projectFolderMaxDepth": 2,
  // "allowMostlyStandardPackageNames": true,
  "approvedPackagesPolicy": {
    /**
     * The review categories allow you to say for example "This library is approved for usage
     * in prototypes, but not in production code."
     *
     * Each project can be associated with one review category, by assigning the "reviewCategory" field
     * in the "projects" section of rush.json.  The approval is then recorded in the files
     * "common/config/rush/browser-approved-packages.json" and "nonbrowser-approved-packages.json"
     * which are automatically generated during "rush update".
     *
     * Designate categories with whatever granularity is appropriate for your review process,
     * or you could just have a single category called "default".
     */
    "reviewCategories": ["web-ui", "web-build"],
    "ignoredNpmScopes": ["@types"]
  },

  "gitPolicy": {
    /**
     * Work at a big company?  Tired of finding Git commits at work with unprofessional Git
     * emails such as "beer-lover@my-college.edu"?  Rush can validate people's Git email address
     * before they get started.
     *
     * Define a list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.  Example: ".*@example\.com"
     *
     * IMPORTANT: Because these are regular expressions encoded as JSON string literals,
     * RegExp escapes need two backslashes, and ordinary periods should be "\\.".
     */
    "allowedEmailRegExps": [
      "[^@]+@users\\.noreply\\.github\\.com",
      "\\d+\\+[^@]+@users\\.noreply\\.github\\.com"
    ],
    "sampleEmail": "1234567+myusername@users.noreply.github.com",

    /**
     * The commit message to use when committing changes during 'rush publish'.
     */
    // "versionBumpCommitMessage": "Bump versions [skip ci]",

    /**
     * The commit message to use when committing changes during 'rush version'.
     */
    // "changeLogUpdateCommitMessage": "Update changelogs [skip ci]",

    /**
     * The commit message to use when committing changefiles during 'rush change --commit'
     */
    "changefilesCommitMessage": "Rush change"
  },

  "repository": {
    "url": "https://github.com/rhom6us/heft-plugins",
    "defaultBranch": "master"
  },

  // Event hooks are customized script actions that Rush executes when specific events occur
  "eventHooks": {
    // "rush install" or "rush update"
    "preRushInstall": [
      /* "common/scripts/pre-rush-install.js" */
    ],
    "postRushInstall": [],

    // "rush build" or "rush rebuild"
    "preRushBuild": [],
    "postRushBuild": [],

    // "rushx"
    "preRushx": [],
    "postRushx": []
  },

  "telemetryEnabled": false,

  /**
   * Allows creation of hotfix changes. This feature is experimental so it is disabled by default.
   * If this is set, 'rush change' only allows a 'hotfix' change type to be specified. This change type
   * will be used when publishing subsequent changes from the monorepo.
   */
  // "hotfixChangeEnabled": false,

  /**
   * This is an optional, but recommended, list of allowed tags that can be applied to Rush projects
   * using the "tags" setting in this file.  This list is useful for preventing mistakes such as misspelling,
   * and it also provides a centralized place to document your tags.  If "allowedProjectTags" list is
   * not specified, then any valid tag is allowed.  A tag name must be one or more words
   * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,
   * ".", and "@" characters.
   */
  // "allowedProjectTags": [ "tools", "frontend-team", "1.0.0-release" ],

  /**
   * (Required) This is the inventory of projects to be managed by Rush.
   *
   * Rush does not automatically scan for projects using wildcards, for a few reasons:
   * 1. Depth-first scans are expensive, particularly when tools need to repeatedly collect the list.
   * 2. On a caching CI machine, scans can accidentally pick up files left behind from a previous build.
   * 3. It's useful to have a centralized inventory of all projects and their important metadata.
   */
  "projects": [
    //   {
    // "packageName": "my-app",
    // "projectFolder": "apps/my-app",
    // "reviewCategory": "production",
    // "decoupledLocalDependencies": [
    //   // "my-toolchain"
    // ]
    // `rush check` checks each project's package.json files and ensures that all dependencies are of the same version throughout the repository.
    // "skipRushCheck": false,

    /**
     * affects Rush change and publish workflows. The default value is false.
     * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
     */
    // "shouldPublish": false,

    /**
     * `rush publish`  will publish the subfolder instead of the project folder.
     * Must contain its own package.json file.
     */
    // "publishFolder": "temp/publish",

    /**
     * An optional version policy associated with the project.  Version policies are defined
     * in "version-policies.json" file.  See the "rush publish" documentation for more info.
     * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
     */
    // "versionPolicyName": "",
    // "tags": [ "1.0.0-release", "frontend-team" ]
    // },

    {
      "packageName": "@rhom6us/heft-storybook-plugin",
      "projectFolder": "packages/heft-storybook-plugin",
      "reviewCategory": "web-build",
      "tags": ["heft-plugin", "storybook"],

      // "versionPolicyName": "production",
      "shouldPublish": true
    },

    {
      "packageName": "@rhom6us/heft-vite-plugin",
      "projectFolder": "packages/heft-vite-plugin",
      "reviewCategory": "web-build",
      "tags": ["heft-plugin", "vite"],

      // "versionPolicyName": "production",
      "shouldPublish": true
    }
  ]
}
